{
  "account": {
    "": {
      "hex": "",
      "dec": "",
      "description": ""
    }
  },
  "channel": {
    "tfRenew": {
      "hex": "0x00010000",
      "dec": "65536",
      "description": "Clear the channel's Expiration time. (Expiration is different from the channel's immutable CancelAfter time.) Only the source address of the payment channel can use this flag."
    },
    "tfClose": {
      "hex": "0x00020000",
      "dec": "131072",
      "description": "Request to close the channel. Only the channel source and destination addresses can use this flag. This flag closes the channel immediately if it has no more XRP allocated to it after processing the current claim, or if the destination address uses it. If the source address uses this flag when the channel still holds XRP, this schedules the channel to close after SettleDelay seconds have passed. (Specifically, this sets the Expiration of the channel to the close time of the previous ledger plus the channel's SettleDelay time, unless the channel already has an earlier Expiration time.) If the destination address uses this flag when the channel still holds XRP, any XRP that remains after processing the claim is returned to the source address."
    }
  },
  "offer": {
    "tfPassive": {
      "hex": "0x00010000",
      "dec": "65536",
      "description": "If enabled, the offer does not consume offers that exactly match it, and instead becomes an Offer object in the ledger. It still consumes offers that cross it."
    },
    "tfImmediateOrCancel": {
      "hex": "0x00020000",
      "dec": "131072",
      "description": "Treat the offer as an Immediate or Cancel order. If enabled, the offer never becomes a ledger object: it only tries to match existing offers in the ledger."
    },
    "tfFillOrKill": {
      "hex": "0x00040000",
      "dec": "262144",
      "description": "Treat the offer as a Fill or Kill order. Only try to match existing offers in the ledger, and only do so if the entire TakerPays quantity can be obtained."
    },
    "tfSell": {
      "hex": "0x00080000",
      "dec": "524288",
      "description": "Exchange the entire TakerGets amount, even if it means obtaining more than the TakerPays amount in exchange."
    }
  },
  "payment": {
    "tfNoDirectRipple": {
      "hex": "0x00010000",
      "dec": "65536",
      "description": "Do not use the default path; only use paths included in the Paths field. This is intended to force the transaction to take arbitrage opportunities. Most clients do not need this."
    },
    "tfPartialPayment": {
      "hex": "0x00020000",
      "dec": "131072",
      "description": "If the specified Amount cannot be sent without spending more than SendMax, reduce the received amount instead of failing outright. See Partial Payments for more details."
    },
    "tfLimitQuality": {
      "hex": "0x00040000",
      "dec": "262144",
      "description": "Only take paths where all the conversions have an input:output ratio that is equal or better than the ratio of Amount:SendMax. See Limit Quality for details."
    }
  },
  "trust": {
    "tfSetfAuth": {
      "hex": "0x00010000",
      "dec": "65536",
      "description": "Authorize the other party to hold issuances from this account. (No effect unless using the asfRequireAuth AccountSet flag.) Cannot be unset."
    },
    "tfSetNoRipple": {
      "hex": "0x00020000",
      "dec": "131072",
      "description": "Blocks rippling between two trustlines of the same currency, if this flag is set on both. (See No Ripple for details.)"
    },
    "tfClearNoRipple": {
      "hex": "0x00040000",
      "dec": "262144",
      "description": "Clears the No-Rippling flag. (See NoRipple for details.)"
    },
    "tfSetFreeze": {
      "hex": "0x00100000",
      "dec": "1048576",
      "description": "Freeze the trustline."
    },
    "tfClearFreeze": {
      "hex": "0x00200000",
      "dec": "2097152",
      "description": "Unfreeze the trustline."
    }
  }
}
